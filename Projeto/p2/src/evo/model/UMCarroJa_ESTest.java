/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 14:22:47 GMT 2020
 */

package model;

import exceptions.CarExistsException;
import exceptions.InvalidUserException;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;
import model.Car;
import model.Client;
import model.Owner;
import model.Rental;
import model.UMCarroJa;
import model.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UMCarroJa_ESTest extends UMCarroJa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.logIn("Hibrido", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      try { 
        uMCarroJa0.addCar((String) null, "@gmail.com", car_CarType0, (-2362.3836), (-2362.3836), (-500.06799), 0, point0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner(".\"wPr~iwnL", ".\"wPr~iwnL", ".\"wPr~iwnL", 0, ".\"wPr~iwnL");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(1.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(".\"wPr~iwnL", owner0, car_CarType0, (-1.0), 1630.4697528, 2.0, 2, point0, "SDd6H");
      Client client0 = new Client(point0, "$hC)_}B/KimxLb.N", "$hC)_}B/KimxLb.N", "SDd6H", "A1q\"TAN^g\"0", 2);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.refuse(owner0, rental0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("P\"N.-qb2k3", "P\"N.-qb2k3", "P\"N.-qb2k3", 866, "model.UMCarroJa");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(866);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0.0, 1.0, 0.0, 866, point0, "");
      Client client0 = new Client(point0, "P\"N.-qb2k3", ";ae_Y^G4*t*(m", "", "P\"N.-qb2k3", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rate(owner0, rental0, 2951);
      assertEquals(2951, client0.getRates());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(1780.1132258633568);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", 0);
      Owner owner0 = new Owner("exceptions.CarExistsException", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("", owner0, car_CarType0, (-1522788922), 3058.236818428824, 0.5, 0, point0, "hEg>(yQ|Y");
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rate(client0, rental0, (-1522788922), (-1522788922));
      assertEquals((-1522788922), owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", ":M78')", "&Acz7@.5H4K", (-1), "@gmail.com");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "@gmail.com", car_CarType0, 2867.679, (-1.0), 1.0, (-1), point0, "");
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("*>\"gmc!LH8w", "K", "_v,=od8wteTGhu<}]D", 0, "*>\"gmc!LH8w");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1629.6);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("*>\"gmc!LH8w", owner0, car_CarType0, 0, 0, 0, 0, point0, "_v,=od8wteTGhu<}]D");
      Client client0 = new Client(point0, "[18m0g9^0;vwGr", "Y", "exceptions.UserExistsException", "@gmail.com", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rent(rental0);
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "&Acz7@.5H4K", (-1), "&Acz7@.5H4K");
      uMCarroJa0.addUser(owner0);
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClientsTravel();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "h1M+q9Sr.-", "&Acz7@.5H4K", (-1), "@gmail.com");
      uMCarroJa0.addUser(owner0);
      List<Map.Entry<String, Integer>> list0 = (List<Map.Entry<String, Integer>>)uMCarroJa0.getBestClientsTimes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "h1M+q9Sr.-", "&Acz7@.5H4K", (-1), "@gmail.com");
      uMCarroJa0.addUser(owner0);
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClients();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "P", "P", "&nT", 246);
      Owner owner0 = new Owner(client0);
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("3(`n89@v", "_E=n", "3(`n89@v", (-2422), "@gmail.com");
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(2.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", (-1522));
      Owner owner0 = new Owner(client0);
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, (-1522), 280.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "\n\n", 1118, "@gmail.com");
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, 1118, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1118, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.save((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-3984.485));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Mx{07zbMT", "Mx{07zbMT", "Mx{07zbMT", "model.UMCarroJa", 522);
      try { 
        uMCarroJa0.rental(point0, "1QZ", client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental((Client) null, (Point) null, "K-Wc?p", car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Client client0 = new Client((Point) null, "BN+CK", "d5'", "", "}iPi", 1432);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental(client0, (Point) null, (double) 1432, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("utils.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.rent((Rental) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "m!V(pjzmIz+#dy", "m!V(pjzmIz+#dy", "m!V(pjzmIz+#dy", "m!V(pjzmIz+#dy", (-1335));
      Owner owner0 = new Owner(client0);
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, (-1335));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", (-2062), "UV}");
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, (-2062));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        UMCarroJa.read((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getTotalBilledCar((Car) null, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Instant instant0 = MockInstant.ofEpochSecond((long) 5);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListClient((Client) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.addUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      // Undeclared exception!
      try { 
        uMCarroJa0.addCar((Owner) null, "yyyy-MM-dd HH:mm", car_CarType0, 2607.44, 2607.44, 2607.44, 0, (Point) null, "a{!>w:z86$1KkY9x`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-3984.485));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Mx{07zbMT", "Mx{07zbMT", "cStUrt1\"", "cStUrt1\"", 522);
      uMCarroJa0.addUser(client0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Owner owner0 = new Owner("Mx{07zbMT", "+or%`", "1QZ", 0, "dF+\"GKe_*Dn07I");
      // Undeclared exception!
      try { 
        uMCarroJa0.addCar(owner0, "MaisBarato", car_CarType0, 2, (-2127.4), 0.0, 522, point0, "k|xa_-*#Im8");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // model.Client cannot be cast to model.Owner
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.refuse((Owner) null, (Rental) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.5);
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("W+XF/0~I", "d^T", "W+XF/0~I", (-2168), "d^T");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Car car0 = new Car("d^T", owner0, car_CarType0, 1029.84, 1029.84, 0.0, 969, point0, (String) null);
      double double1 = uMCarroJa0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Integer>> list0 = (List<Map.Entry<String, Integer>>)uMCarroJa0.getBestClientsTimes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("*>\"gmc!LH8w", "K", "_v,=od8wteTGhu<}]D", 0, "*>\"gmc!LH8w");
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("HYBRID");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-3984.485));
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Owner owner0 = new Owner("Mx{07zbMT", "+or%`", "1QZ", 0, "dF+\"GKe_*Dn07I");
      try { 
        uMCarroJa0.addCar(owner0, "MaisBarato", car_CarType0, 2, (-2127.4), 0.0, 522, point0, "k|xa_-*#Im8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, (String) null, "Ram3h'R\"^wS", 5315);
      // Undeclared exception!
      try { 
        uMCarroJa0.rate(client0, (Rental) null, 5315, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", (-1522788922), "pyR");
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "Xq`|E", 1315, "Xq`|E");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-534.832001886));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Xq`|E", owner0, car_CarType0, (-1541.498398), (-1.0), (-1.0), 0, point0, "");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      double double1 = uMCarroJa0.getTotalBilledCar(car0, localDateTime0, localDateTime0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", (-1522788922), "pyR");
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0, (LocalDateTime) null, (LocalDateTime) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.rate("", (-4280));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClients();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", " ]_y-&", "", (-1), "vb'ZSDS");
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, (-1), (-906.2065));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "@gmail.com", "", "", "", (-1413));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1413));
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0, localDateTime0, localDateTime0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "Xq`|E", 1315, "Xq`|E");
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, (-36));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("*>\"gmc!LH8w", "K", "_v,=od8wteTGhu<}]D", 0, "*>\"gmc!LH8w");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1629.6);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("*>\"gmc!LH8w", owner0, car_CarType0, 0, 0, 0, 0, point0, "_v,=od8wteTGhu<}]D");
      Client client0 = new Client(point0, "[18m0g9^0;vwGr", "", "exceptions.UserExistsException", "@gmail.com", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rent(rental0);
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0);
      assertTrue(list0.contains(rental0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-1522788922));
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      try { 
        uMCarroJa0.rental("", point0, "1?U}", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.5);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "d^T", "`nN7]D>fy1krv", "`nN7]D>fy1krv", "W+XF/0~I", 969);
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "@gmail.com", "", "", "", (-1413));
      Car.CarType car_CarType0 = Car.CarType.ANY;
      try { 
        uMCarroJa0.rental(point0, 0.1, car_CarType0, client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.5);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "d^T", "`nN7]D>fy1krv", "`nN7]D>fy1krv", "W+XF/0~I", 969);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      try { 
        uMCarroJa0.rental(client0, point0, "|", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      try { 
        UMCarroJa.read(">SP-5");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner((String) null, "\" 7Dk\"{WD3", "Aiwi", 0, "model.UMCarroJa");
      // Undeclared exception!
      try { 
        uMCarroJa0.rate(owner0, (Rental) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.2);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "model.Car$CarType", "model.Car$CarType", "model.Car$CarType", "model.Car$CarType", 870);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      try { 
        uMCarroJa0.rental(client0, point0, (-537.106854418), car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClientsTravel();
      assertTrue(list0.isEmpty());
  }

    @Test(timeout = 4000)
    public void testaAdicionaCarro()  throws CarExistsException, InvalidUserException {
        UMCarroJa uMCarroJa2 = new UMCarroJa();
        Owner ow = new Owner("maria@hotmail.com", "maria", "Braga", 0, "maria");
        Car.CarType ctype = Car.CarType.HYBRID;
        Point p = new Point(1.2, 1.3);
        Car c = new Car("2", ow, ctype, (-1.0), 1630.4697528, 3.0, 2, p, "SDd6H");
        try {
            uMCarroJa2.addCar((String) null, "@gmail.com", ctype, (-2362.3836), (-2362.3836), (-500.06799), 0, p, (String) null);
            ow.addCar(c);

        } catch(Exception e) {

        }
    }
}
