/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 14:24:07 GMT 2020
 */

package utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import utils.StringBetter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringBetter_ESTest extends StringBetter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("\u001B[35m");
      StringBetter stringBetter1 = stringBetter0.bold();
      StringBetter stringBetter2 = stringBetter1.grey();
      stringBetter0.grey();
      StringBetter stringBetter3 = stringBetter2.hideCursor();
      stringBetter2.blue();
      stringBetter1.bold();
      StringBetter stringBetter4 = stringBetter3.blink();
      StringBetter stringBetter5 = stringBetter4.hideCursor();
      StringBetter stringBetter6 = stringBetter4.green();
      stringBetter6.blue();
      stringBetter3.append("\u001B[35m");
      StringBetter stringBetter7 = stringBetter6.hideCursor();
      StringBetter stringBetter8 = stringBetter0.green();
      stringBetter8.blink();
      stringBetter8.grey();
      StringBetter stringBetter9 = stringBetter5.repeat(4047);
      stringBetter6.under();
      StringBetter stringBetter10 = stringBetter3.white();
      stringBetter9.green();
      StringBetter stringBetter11 = stringBetter10.repeat(3733);
      stringBetter11.black();
      stringBetter4.cyan();
      StringBetter stringBetter12 = stringBetter7.under();
      stringBetter12.toString();
      StringBetter stringBetter13 = stringBetter10.blink();
      // Undeclared exception!
      stringBetter13.repeat(4047);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.blue();
      StringBetter stringBetter2 = stringBetter1.bold();
      StringBetter stringBetter3 = stringBetter2.white();
      StringBetter stringBetter4 = stringBetter3.cyan();
      stringBetter1.green();
      StringBetter stringBetter5 = stringBetter4.showCursor();
      stringBetter0.white();
      StringBetter stringBetter6 = stringBetter5.repeat(4064);
      StringBetter stringBetter7 = stringBetter6.hideCursor();
      StringBetter stringBetter8 = stringBetter5.green();
      StringBetter stringBetter9 = stringBetter5.white();
      stringBetter9.orange();
      StringBetter stringBetter10 = stringBetter8.showCursor();
      StringBetter stringBetter11 = stringBetter8.green();
      stringBetter11.orange();
      stringBetter1.grey();
      StringBetter stringBetter12 = stringBetter4.hideCursor();
      StringBetter stringBetter13 = stringBetter12.hideCursor();
      StringBetter stringBetter14 = stringBetter0.hideCursor();
      stringBetter14.blue();
      stringBetter14.under();
      StringBetter stringBetter15 = stringBetter11.append("\u001B[33m");
      stringBetter0.cyan();
      stringBetter0.white();
      stringBetter15.getStr();
      stringBetter3.hideCursor();
      StringBetter stringBetter16 = stringBetter3.orange();
      StringBetter stringBetter17 = stringBetter3.grey();
      StringBetter stringBetter18 = stringBetter12.blink();
      stringBetter17.showCursor();
      stringBetter13.under();
      StringBetter stringBetter19 = stringBetter10.showCursor();
      stringBetter19.grey();
      stringBetter16.bold();
      stringBetter18.roxo();
      stringBetter17.white();
      // Undeclared exception!
      stringBetter7.repeat(4064);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      stringBetter0.toString();
      StringBetter stringBetter1 = stringBetter0.orange();
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("ru;)HlSXueK6~-SM d");
      StringBetter stringBetter1 = stringBetter0.repeat((-846));
      StringBetter stringBetter2 = stringBetter1.blue();
      StringBetter stringBetter3 = stringBetter2.hideCursor();
      StringBetter stringBetter4 = stringBetter3.black();
      String string0 = stringBetter4.toString();
      assertEquals("\u001B[30m\u001B[34m\u001B[0m\u001B[?25l\u001B[0m", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter((String) null);
      StringBetter stringBetter1 = stringBetter0.cyan();
      StringBetter stringBetter2 = stringBetter1.green();
      StringBetter stringBetter3 = stringBetter2.hideCursor();
      assertEquals("\u001B[32m\u001B[36mnull\u001B[0m\u001B[0m\u001B[?25l", stringBetter3.getStr());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      stringBetter0.getStr();
      StringBetter stringBetter1 = stringBetter0.blink();
      assertEquals("\u001B[5m\u001B[0m", stringBetter1.toString());
      
      StringBetter stringBetter2 = stringBetter0.bold();
      assertEquals("\u001B[1m\u001B[0m", stringBetter2.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.showCursor();
      stringBetter1.showCursor();
      StringBetter stringBetter2 = stringBetter1.green();
      StringBetter stringBetter3 = stringBetter0.under();
      StringBetter stringBetter4 = stringBetter3.grey();
      assertEquals("\u001B[37m\u001B[4m\u001B[0m\u001B[0m", stringBetter4.toString());
      
      StringBetter stringBetter5 = stringBetter2.blue();
      assertEquals("\u001B[34m\u001B[32m\u001B[?25h\u001B[0m\u001B[0m", stringBetter5.getStr());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.white();
      StringBetter stringBetter2 = stringBetter1.black();
      StringBetter stringBetter3 = stringBetter2.green();
      StringBetter stringBetter4 = stringBetter3.append("H<vAwExKPgCQkq");
      StringBetter stringBetter5 = stringBetter4.bold();
      String string0 = stringBetter5.getStr();
      assertEquals("\u001B[1m\u001B[32m\u001B[30m\u001B[38m\u001B[0m\u001B[0m\u001B[0mH<vAwExKPgCQkq\u001B[0m", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("");
      StringBetter stringBetter1 = stringBetter0.orange();
      StringBetter stringBetter2 = stringBetter1.grey();
      StringBetter stringBetter3 = stringBetter2.roxo();
      StringBetter stringBetter4 = stringBetter3.hideCursor();
      StringBetter stringBetter5 = stringBetter4.black();
      StringBetter stringBetter6 = stringBetter5.black();
      assertEquals("\u001B[30m\u001B[30m\u001B[35m\u001B[37m\u001B[33m\u001B[0m\u001B[0m\u001B[0m\u001B[?25l\u001B[0m\u001B[0m", stringBetter6.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.append(">qGdPB(");
      StringBetter stringBetter2 = stringBetter1.under();
      assertEquals("\u001B[4m>qGdPB(\u001B[0m", stringBetter2.toString());
      
      StringBetter stringBetter3 = stringBetter0.cyan();
      assertEquals("\u001B[36m>qGdPB(\u001B[0m", stringBetter3.getStr());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter((String) null);
      StringBetter stringBetter1 = stringBetter0.blink();
      assertEquals("\u001B[5mnull\u001B[0m", stringBetter1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.black();
      StringBetter stringBetter2 = stringBetter1.showCursor();
      StringBetter stringBetter3 = stringBetter2.bold();
      StringBetter stringBetter4 = stringBetter3.blue();
      StringBetter stringBetter5 = stringBetter4.white();
      StringBetter stringBetter6 = stringBetter5.hideCursor();
      assertEquals("\u001B[38m\u001B[34m\u001B[1m\u001B[30m\u001B[0m\u001B[?25h\u001B[0m\u001B[0m\u001B[0m\u001B[?25l", stringBetter6.getStr());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.repeat(4990);
      StringBetter stringBetter2 = stringBetter1.roxo();
      StringBetter stringBetter3 = stringBetter2.orange();
      StringBetter stringBetter4 = stringBetter3.green();
      StringBetter stringBetter5 = stringBetter4.red();
      StringBetter stringBetter6 = stringBetter5.red();
      assertEquals("\u001B[31m\u001B[31m\u001B[32m\u001B[33m\u001B[35m\u001B[0m\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("");
      StringBetter stringBetter1 = stringBetter0.grey();
      StringBetter stringBetter2 = stringBetter1.under();
      StringBetter stringBetter3 = stringBetter1.red();
      assertEquals("\u001B[31m\u001B[37m\u001B[0m\u001B[0m", stringBetter3.getStr());
      
      StringBetter stringBetter4 = stringBetter2.repeat(770);
      String string0 = stringBetter4.getStr();
      assertEquals("\u001B[4m\u001B[37m\u001B[0m\u001B[0m", stringBetter2.toString());
      
      stringBetter2.append(string0);
      assertEquals("\u001B[37m\u001B[0m", stringBetter1.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.green();
      StringBetter stringBetter2 = stringBetter1.blue();
      StringBetter stringBetter3 = stringBetter2.black();
      StringBetter stringBetter4 = stringBetter0.grey();
      StringBetter stringBetter5 = stringBetter4.black();
      StringBetter stringBetter6 = stringBetter1.orange();
      StringBetter stringBetter7 = stringBetter3.showCursor();
      assertEquals("\u001B[30m\u001B[34m\u001B[32m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h", stringBetter7.toString());
      
      stringBetter4.under();
      StringBetter stringBetter8 = stringBetter6.repeat((-1));
      StringBetter stringBetter9 = stringBetter8.under();
      assertEquals("\u001B[4m\u001B[0m", stringBetter9.getStr());
      
      stringBetter8.toString();
      assertEquals("\u001B[33m\u001B[32m\u001B[0m\u001B[0m", stringBetter6.getStr());
      
      StringBetter stringBetter10 = stringBetter3.bold();
      assertEquals("\u001B[1m\u001B[30m\u001B[34m\u001B[32m\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter10.toString());
      
      StringBetter stringBetter11 = stringBetter4.roxo();
      assertEquals("\u001B[35m\u001B[37m\u001B[0m\u001B[0m", stringBetter11.toString());
      
      stringBetter3.blue();
      StringBetter stringBetter12 = stringBetter5.hideCursor();
      assertEquals("\u001B[30m\u001B[37m\u001B[0m\u001B[0m\u001B[?25l", stringBetter12.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("CRf(EqyfUiRS\"#-RXB");
      StringBetter stringBetter1 = stringBetter0.green();
      stringBetter0.cyan();
      StringBetter stringBetter2 = stringBetter1.cyan();
      stringBetter2.showCursor();
      StringBetter stringBetter3 = stringBetter2.blink();
      StringBetter stringBetter4 = stringBetter3.showCursor();
      assertEquals("\u001B[5m\u001B[36m\u001B[32mCRf(EqyfUiRS\"#-RXB\u001B[0m\u001B[0m\u001B[0m\u001B[?25h", stringBetter4.getStr());
      
      StringBetter stringBetter5 = stringBetter2.white();
      assertEquals("\u001B[38m\u001B[36m\u001B[32mCRf(EqyfUiRS\"#-RXB\u001B[0m\u001B[0m\u001B[0m", stringBetter5.getStr());
  }
}
