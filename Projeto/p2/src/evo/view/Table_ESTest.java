/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 14:10:29 GMT 2020
 */

package view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import view.Table;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Table_ESTest extends Table_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("N3)5");
      linkedList0.add((List<String>) linkedList1);
      linkedList1.addFirst("N3)5");
      Table<String> table0 = new Table<String>(linkedList0, linkedList1, linkedList1);
      // Undeclared exception!
      try { 
        table0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("SAW}&`%(z<;N,h$x.");
      linkedList0.add("*jQFj|igf5 c,6");
      Table<Object> table0 = new Table<Object>((List<List<Object>>) null, linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        table0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.Table", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("N3)5");
      List<String> list0 = linkedList0.subList(1, 1);
      linkedList0.addFirst("N3)5");
      LinkedList<List<LinkedList<Object>>> linkedList1 = new LinkedList<List<LinkedList<Object>>>();
      Table<LinkedList<Object>> table0 = new Table<LinkedList<Object>>(linkedList1, list0, list0);
      // Undeclared exception!
      try { 
        table0.toString();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("N3)5");
      linkedList0.add((List<String>) linkedList1);
      Table<String> table0 = new Table<String>(linkedList0, linkedList1, linkedList1);
      String string0 = table0.toString();
      assertFalse(linkedList1.contains(string0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<List<LinkedList<String>>> linkedList1 = new LinkedList<List<LinkedList<String>>>();
      LinkedList<LinkedList<String>> linkedList2 = new LinkedList<LinkedList<String>>();
      linkedList2.add(linkedList0);
      linkedList1.add((List<LinkedList<String>>) linkedList2);
      Table<LinkedList<String>> table0 = new Table<LinkedList<String>>(linkedList1, linkedList0, linkedList0);
      linkedList0.add("+--+-------------------+\n|  | /~h#,;`}cl&0{<tU |\n+--+-------------------+\n");
      String string0 = table0.toString();
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Table<Integer> table0 = new Table<Integer>(linkedList0, linkedList1, linkedList2);
      linkedList2.addFirst("/~h#,;`}cl&0{<tU");
      String string0 = table0.toString();
      assertEquals("+--+------------------+\n|  | /~h#,;`}cl&0{<tU |\n+--+------------------+\n", string0);
  }
}
