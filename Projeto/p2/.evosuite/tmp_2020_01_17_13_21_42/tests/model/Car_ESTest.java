/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 13:58:35 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import model.Car;
import model.Client;
import model.Owner;
import model.Rental;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Car_ESTest extends Car_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2227), "EUQPy");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 0.0, 0.0, 0, point0, "");
      Car car1 = new Car(car0);
      car1.swapState();
      car0.rate(0, 0);
      car1.swapState();
      car0.equals(car1);
      assertEquals(0, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner("exceptions.UnknownCarTypeException", "exceptions.UnknownCarTypeException", "qM]eo%b >w8][}tzh?", 92016728, "");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(1018.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("qM]eo%b >w8][}tzh?", owner0, car_CarType0, 92016728, 0.2, 1018.0, 92016728, point0, "");
      Client client0 = new Client(point0, "<Srr^2[zm w", "", "exceptions.UnknownCarTypeException", "<Srr^2[zm w", 92016728);
      Car car1 = new Car(car0);
      Rental rental0 = new Rental(car1, client0, point0);
      owner0.addPendingRental(rental0);
      assertTrue(car0.equals((Object)car1));
      
      car0.rate(559);
      Rental rental1 = new Rental(car0, client0, point0);
      owner0.refuse(rental1);
      assertFalse(rental1.equals((Object)rental0));
      assertFalse(car0.equals((Object)car1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 92016728, "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1018.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 92016728, 92016728, 1018.0, 92016728, point0, "");
      Double double1 = new Double(92016728);
      Point point1 = new Point(double1, double1);
      Car car1 = new Car(car0);
      assertTrue(car1.equals((Object)car0));
      
      car1.setPosition(point1, 1111.574855165);
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-1130), "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1130));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1130), (-1130), (-1130), (-1130), point0, "");
      Car car1 = new Car("", owner0, car_CarType0, (-1130), (-1130), (-1130), (-3996), point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner("", "", "c}yW_XSO$1}aO0]E", 8, "c}yW_XSO$1}aO0]E");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(8);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 8, 8, 8, 8, point0, "");
      Car car1 = new Car("", owner0, car_CarType0, 8, 8, 0.0, 8, point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
      assertFalse(car1.equals((Object)car0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2227), "EUQPy");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 0.0, 0.0, 0, point0, (String) null);
      Car car1 = new Car(car0);
      car1.setBasePrice((-585.687118617));
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("", "", "c}yW_XSO$1}aO0]E", (-1158), "c}yW_XSO$1}aO0]E");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1158));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1158), (-1158), (-1158), (-1158), point0, "");
      Car car1 = new Car("Hibrido", owner0, car_CarType0, 0, 2069.204, 2125.404210691, (-1158), point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0, 0, point0, "");
      boolean boolean0 = car0.hasRange(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1.0);
      Double double1 = new Double((-3.3542));
      Point point0 = new Point(double0, double1);
      Point point1 = new Point(double0, double0);
      Car car0 = new Car("Dono:           ", (Owner) null, car_CarType0, 0.0, 1501.883627797, 0.0, (-3124), point1, ")[s^6@.C28mzX");
      boolean boolean0 = car0.hasRange(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("cL#WPt#JT\"#|*ZgY", "cL#WPt#JT\"#|*ZgY", "cL#WPt#JT\"#|*ZgY", 1006, "cL#WPt#JT\"#|*ZgY");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(1006);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("cL#WPt#JT\"#|*ZgY", owner0, car_CarType0, (-1.0), 0.0, 0.0, 1006, point0, "cL#WPt#JT\"#|*ZgY");
      car0.rate(1006);
      car0.rate(1006);
      String string0 = car0.toString();
      assertEquals("cL#WPt#JT\"#|*ZgY\n1006.00\n0.00\ntrue\n1006", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(501.245530361);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(":jj#~rlFz", (Owner) null, car_CarType0, 0.0, (-2087.205537764853), 0.0, (-749), point0, "");
      car0.swapState();
      boolean boolean0 = car0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("kXP721osuh{^ %kM4d", "", "kXP721osuh{^ %kM4d", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1203.8452121584);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("kXP721osuh{^ %kM4d", owner0, car_CarType0, 0, 0, 1203.8452121584, 0, point0, "e!Gg^'2/~AJ=4F");
      double double1 = car0.getRange();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Owner owner0 = new Owner("W3,dG1FMX", "W3,dG1FMX", "s]0VifE)/>n.8C\"Kq~", 100, "@sv");
      Double double0 = Double.valueOf((double) 100);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("W3,dG1FMX", owner0, car_CarType0, 0.0, (-2547.3930755043), 100, 569, point0, "s]0VifE)/>n.8C\"Kq~");
      double double1 = car0.getRange();
      assertEquals(569.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("oQw{$GK4+[Pd}`QN&0", "oQw{$GK4+[Pd}`QN&0", "#&Q", (-3751), "Hibrido");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(2.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Hibrido", owner0, car_CarType0, (-3751), 0.0, (-3751), (-3751), point0, "Hibrido");
      double double1 = car0.getRange();
      assertEquals((-3751.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Client client0 = new Client((Point) null, "HJa]Dy+`9${=z2 e7", "9I8]/'\"z~Ip", "AS*+q*1{aFF", "9I8]/'\"z~Ip", 0);
      Owner owner0 = new Owner(client0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Car car0 = new Car("AS*+q*1{aFF", owner0, car_CarType0, 0, 0, 2088.26, 1, (Point) null, "AS*+q*1{aFF");
      Point point0 = car0.getPosition();
      assertNull(point0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(981.68744);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, (Owner) null, car_CarType0, (-2423.72741403), (-2423.72741403), (-2423.72741403), 502, point0, "B=`h4M7Dxt0Mo3C4o");
      Point point1 = car0.getPosition();
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, "", (-2588), (String) null);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(33.5421212550828);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, (-2588), (-2588), (-2588), 256, point0, "");
      String string0 = car0.getOwnerID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner("(", "(", "(", 0, "(");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("(", owner0, car_CarType0, 0, 0.0, (-550.4056443), 628, point0, "(");
      String string0 = car0.getOwnerID();
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1, "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car("", owner0, car_CarType0, 1, 1385.0, 204.0570532766784, (-209), (Point) null, "");
      String string0 = car0.getOwnerID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2227), "EUQPy");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 0.0, 0.0, 0, point0, "");
      String string0 = car0.getNumberPlate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("VaK'k1nz%[;", (Owner) null, car_CarType0, 0.0, 0.0, 1669.5872099333085, 2570, point0, "(3g");
      String string0 = car0.getNumberPlate();
      assertEquals("VaK'k1nz%[;", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Owner owner0 = new Owner("", "", "%.2f", (-1522788922), "%.2f");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("", owner0, car_CarType0, (-1522788922), (-1522788922), 0.4, (-1522788922), (Point) null, "");
      String string0 = car0.getNumberPlate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Owner owner0 = new Owner("6QW", "6QW", "", 472, "6QW");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("6QW", owner0, car_CarType0, 552.544384944283, 552.544384944283, 0.2, (-654), point0, "UG>L+m%");
      double double1 = car0.getBasePrice();
      assertEquals(552.544384944283, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Owner owner0 = new Owner("KqD^~(9F\"WbdT7>w*", "exceptions.UnknownCarTypeException", "exceptions.UnknownCarTypeException", 0, "KqD^~(9F\"WbdT7>w*");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("exceptions.UnknownCarTypeException", owner0, car_CarType0, (-1789.6605164310936), (-1813.264214341), 2365.2728882950414, 0, point0, "exceptions.UnknownCarTypeException");
      double double1 = car0.getBasePrice();
      assertEquals((-1813.264214341), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Owner owner0 = new Owner("36:h*", "rgo?> s?tZ@fE", "82\"IVV;lQ~s.DM=", 0, "36:h*");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-1773));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("rgo?> s?tZ@fE", owner0, car_CarType0, 0, 0, 0, (-1773), point0, "\n");
      double double1 = car0.getAvgSpeed();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Owner owner0 = new Owner("", "", "f]n", (-1036), "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car("", owner0, car_CarType0, 1376.36124948991, 1376.36124948991, 0.15, 139, (Point) null, "&U]");
      double double0 = car0.getAvgSpeed();
      assertEquals(1376.36124948991, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(981.68744);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, (Owner) null, car_CarType0, (-2423.72741403), (-2423.72741403), (-2423.72741403), 502, point0, "B=`h4M7Dxt0Mo3C4o");
      double double1 = car0.getAvgSpeed();
      assertEquals((-2423.72741403), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Owner owner0 = new Owner("C{0ot;Y1!xN@Pk1Wi|`", "Todos", "Todos", (-1), "Todos");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car("C{0ot;Y1!xN@Pk1Wi|`", owner0, car_CarType0, 0.0, 0.0, 3088.4515480611103, (-1), (Point) null, "Todos");
      // Undeclared exception!
      try { 
        car0.setPosition((Point) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Car car0 = new Car((String) null, (Owner) null, car_CarType0, (-1.0), 0.0, (-2070.9), (-798), (Point) null, (String) null);
      // Undeclared exception!
      try { 
        car0.rate((-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("VaK'k1nz%[;", (Owner) null, car_CarType0, 0.0, 0.0, 1669.5872099333085, 2570, point0, "(3g");
      Client client0 = new Client(point0, "", "", "K54kv8~d", "K54kv8~d", 2570);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.pendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(4.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, (Owner) null, car_CarType0, 4.0, (-4056.157711), 4.0, 407, point0, "%<&`;=5L898gmZ");
      // Undeclared exception!
      try { 
        car0.getOwnerID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Owner owner0 = new Owner("Wd-dpL", "HYBRID", "", 100, "S$~<");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 0.0, 210.99680951828486, 0, (Point) null, (String) null);
      Car car1 = new Car(car0);
      // Undeclared exception!
      try { 
        car1.equals(car0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(4.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("phg]", (Owner) null, car_CarType0, 656.4219617836151, 0.0, 1574.92126141, (-458), point0, "V9{q? 5jl^^7W:xhd}[");
      Client client0 = new Client(point0, "Client:        ", "ae<27izYbE>9VaWme=", "Client:        ", (String) null, (-458));
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.approvePendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Owner owner0 = new Owner("oBYP )t\"", "", "oBYP )t\"", 1738, "oBYP )t\"");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1738);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("4_K", owner0, car_CarType0, 0.0, 0.0, 1738, 1738, point0, "4_K");
      Car car1 = new Car(car0);
      Client client0 = new Client(point0, "", "4_K", "4_K", "", 1738);
      Rental rental0 = new Rental(car1, client0, point0);
      client0.rate(rental0, 1738, 100);
      car0.rate(1738);
      assertTrue(car0.equals((Object)car1));
      
      car1.approvePendingRental(rental0);
      car0.swapState();
      car0.swapState();
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0, 0, point0, "");
      Car.CarType car_CarType1 = Car.CarType.GAS;
      Car car1 = new Car("", owner0, car_CarType1, 0, 0, 0, 0, point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0, 0, point0, "");
      Car car1 = new Car("", owner0, car_CarType0, 0, 0, 0, 0, point0, (String) null);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Owner owner0 = new Owner(" ", " ", " ", 0, " ");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(" ", owner0, car_CarType0, 0, 0, 0, 0, point0, " ");
      Car car1 = new Car("", owner0, car_CarType0, 0, 0, 0, 0, point0, " ");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-2227), (String) null);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, (-2227), (-2227), (-2227), 0, point0, (String) null);
      Car car1 = new Car(car0);
      car1.swapState();
      car0.rate(0, 0);
      car1.swapState();
      car1.equals(car0);
      assertEquals(0, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Owner owner0 = new Owner("oBYP )t\"", "", "oBYP )t\"", 1738, "oBYP )t\"");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1738);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("4_K", owner0, car_CarType0, 0.0, 0.0, 1738, 1738, point0, "4_K");
      Car car1 = new Car(car0);
      Client client0 = new Client(point0, "", "4_K", "4_K", "", 1738);
      Rental rental0 = new Rental(car1, client0, point0);
      client0.rate(rental0, 1738, 100);
      car0.rate(1738);
      car0.swapState();
      assertFalse(car0.equals((Object)car1));
      
      car0.swapState();
      boolean boolean0 = car0.equals(car1);
      assertTrue(car1.equals((Object)car0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 92016728, "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1018.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 92016728, 92016728, 1018.0, 92016728, point0, "");
      Double double1 = new Double(92016728);
      Point point1 = new Point(double1, double1);
      Car car1 = new Car(car0);
      assertTrue(car1.equals((Object)car0));
      
      car1.setPosition(point1, 1018.0);
      boolean boolean0 = car0.equals(car1);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-1130), "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1130));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1130), (-1130), (-1130), (-1130), point0, "");
      Car car1 = new Car("", owner0, car_CarType0, (-1130), (-1130), (-1130), (-9), point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Owner owner0 = new Owner(", ", ", ", ", ", (-2866), ", ");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2866));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(", ", owner0, car_CarType0, (-2866), (-2866), (-2866), (-2866), point0, ", ");
      Car car1 = new Car("", owner0, car_CarType0, (-2866), (-2866), 0.0, (-2866), point0, ", ");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1457.8055763785824);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(")3}I3f~6ER.!", (Owner) null, car_CarType0, 1457.8055763785824, 0.2, 1457.8055763785824, 100, point0, "Electrico");
      Car car1 = new Car(car0);
      car1.setBasePrice(0.0);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-6039.38974));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, (-6039.38974), 0, (-1914), point0, "");
      Car car1 = new Car("", owner0, car_CarType0, (-6039.38974), (-1914), (-1914), 0, point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-2227), (String) null);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, (-2227), (-2227), (-2227), 0, point0, (String) null);
      Object object0 = new Object();
      boolean boolean0 = car0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-2227), (String) null);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-2227));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, (-2227), (-2227), (-2227), (-2227), point0, (String) null);
      boolean boolean0 = car0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Owner owner0 = new Owner("oBYP )t\"", "", "oBYP )t\"", 1738, "oBYP )t\"");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1738);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("4_K", owner0, car_CarType0, 0.0, 0.0, 1738, 1738, point0, "4_K");
      Car car1 = new Car(car0);
      Client client0 = new Client(point0, "", "4_K", "4_K", "", 1738);
      Rental rental0 = new Rental(car1, client0, point0);
      assertTrue(car0.equals((Object)car1));
      
      client0.rate(rental0, 1738, 100);
      car0.equals(car1);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-3477.157));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(":pDqO9)@m", (Owner) null, car_CarType0, 0.15, 0.15, 0.15, 3686, point0, ":pDqO9)@m");
      Double double1 = Double.valueOf((double) 3686);
      Point point1 = new Point(double0, double1);
      car0.setPosition(point1, 0.15);
      String string0 = car0.warnings();
      assertEquals("O carro necessita de ser abastecido\n", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Owner owner0 = new Owner("oBYP )t\"", "", "oBYP )t\"", 1738, "oBYP )t\"");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1738);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("4_K", owner0, car_CarType0, 0.0, 0.0, 1738, 1738, point0, "4_K");
      boolean boolean0 = car0.hasRange(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-3477.157));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(":pDqO9)@m", (Owner) null, car_CarType0, 0.15, 0.15, 0.15, 3686, point0, ":pDqO9)@m");
      Double double1 = Double.valueOf((double) 3686);
      Point point1 = new Point(double0, double1);
      car0.setPosition(point1, 0.15);
      boolean boolean0 = car0.hasRange(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Electrico");
      assertEquals(Car.CarType.ELECTRIC, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Todos");
      assertEquals(Car.CarType.ANY, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Gasolina");
      Client client0 = new Client((Point) null, "O4naAxe", "Electrico", "HYBRID", "\u001B[1m", 80982221);
      Owner owner0 = new Owner(client0);
      Car car0 = new Car("Gasolina", owner0, car_CarType0, 80982221, 80982221, 80982221, 80982221, (Point) null, "&B");
      // Undeclared exception!
      try { 
        car0.hasRange((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      try { 
        Car.CarType.fromString("cL#WPt#JT\"#|*ZgY\n1006.00\n1006.00\ntrue\n1006");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car$CarType", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Hibrido");
      assertEquals(Car.CarType.HYBRID, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Car.CarType car_CarType1 = Car.CarType.ANY;
      boolean boolean0 = car_CarType0.igual(car_CarType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Car.CarType car_CarType1 = Car.CarType.HYBRID;
      boolean boolean0 = car_CarType0.igual(car_CarType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      boolean boolean0 = car_CarType0.igual(car_CarType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1457.8055763785824);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(")3}I3f~6ER.!", (Owner) null, car_CarType0, 1457.8055763785824, 0.2, 1457.8055763785824, 100, point0, "Electrico");
      boolean boolean0 = car0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Owner owner0 = new Owner("1", "1", "Gasolina", 2076, "1");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(2076);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("1", owner0, car_CarType0, 2076, 2076, 2076, 2076, point0, "Gasolina");
      car0.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1457.8055763785824);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(")3}I3f~6ER.!", (Owner) null, car_CarType0, 1457.8055763785824, 0.2, 1457.8055763785824, 100, point0, "Electrico");
      car0.setBasePrice(0.0);
      double double1 = car0.getBasePrice();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2227), "EUQPy");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 0.0, 0.0, 0, point0, "");
      String string0 = car0.warnings();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2227), "EUQPy");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 0.0, 0.0, 0, point0, "");
      Car car1 = new Car(car0);
      car1.swapState();
      boolean boolean0 = car1.equals(car0);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2227), "EUQPy");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 0.0, 0.0, 0, point0, "");
      car0.refil();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Owner owner0 = new Owner((String) null, (String) null, "", (-2414), (String) null);
      Double double0 = new Double((-2414));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Gasolina", owner0, car_CarType0, (-2414), (-2414), (-2414), (-2414), point0, ">l<W[%J2k%89pP");
      String string0 = car0.toString();
      assertEquals("Gasolina\n-2414.00\n-2414.00\ntrue\n100", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Owner owner0 = new Owner("}S;%<Pl)!)JBH&12\"8", "}S;%<Pl)!)JBH&12\"8", "}S;%<Pl)!)JBH&12\"8", (-2594), "}S;%<Pl)!)JBH&12\"8");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-2594));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("}S;%<Pl)!)JBH&12\"8", owner0, car_CarType0, (-2594), (-2594), (-2594), (-2594), point0, "}S;%<Pl)!)JBH&12\"8");
      Client client0 = new Client(point0, "}S;%<Pl)!)JBH&12\"8", "}S;%<Pl)!)JBH&12\"8", "}S;%<Pl)!)JBH&12\"8", "}S;%<Pl)!)JBH&12\"8", (-2594));
      Rental rental0 = new Rental(car0, client0, point0);
      car0.pendingRental(rental0);
      Rental rental1 = new Rental(car0, client0, point0);
      car0.approvePendingRental(rental1);
      assertTrue(rental1.equals((Object)rental0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Owner owner0 = new Owner(")?>^Q%A9U5", "Todos", "Todos", (-1599), ")?>^Q%A9U5");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-1599));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Todos", owner0, car_CarType0, (-2971.354798342), 1875.3, 1875.3, (-1599), point0, "Todos");
      Car.CarType car_CarType1 = car0.getType();
      assertSame(car_CarType0, car_CarType1);
  }
}
