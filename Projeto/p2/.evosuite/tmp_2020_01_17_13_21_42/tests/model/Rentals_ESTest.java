/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 14:21:29 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.List;
import model.Car;
import model.Client;
import model.Owner;
import model.Rental;
import model.Rentals;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rentals_ESTest extends Rentals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("model.Rentals", "model.Rentals", "", (-500), "model.Rentals");
      Instant instant0 = MockInstant.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      LocalDateTime localDateTime1 = MockLocalDateTime.ofEpochSecond((-500), 623, zoneOffset0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0, localDateTime0, localDateTime1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(634, 0, zoneOffset0);
      LocalDateTime localDateTime1 = MockLocalDateTime.now();
      Owner owner0 = new Owner("HYBRID", "E<RdgKs`DiN<*CF ", "", 634, "W]<A[A7'9#C9 ZaB");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("E<RdgKs`DiN<*CF ", owner0, car_CarType0, 0.0, (-658.942), 0.0, (-330), (Point) null, "model.Rentals");
      double double0 = rentals0.getTotalBilledCar(car0, localDateTime1, localDateTime0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("[Q[+'QZu7CYO", "[Q[+'QZu7CYO", "[Q[+'QZu7CYO", 2604, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(2604);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("[Q[+'QZu7CYO", owner0, car_CarType0, 2604, 2604, 1.0, 2604, point0, "[Q[+'QZu7CYO");
      Client client0 = new Client(point0, "4km/s[W*]#?|TAjP^H", (String) null, "(2604.00, 2604.00)", (String) null, 0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      rentals0.addRental(rental0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("model.Rentals", "model.Rentals", "", (-500), "model.Rentals");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(623);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("model.Rentals", owner0, car_CarType0, (-500), 623, 784.7208, 0, point0, "G");
      Client client0 = new Client(point0, "model.Rentals", "model.Rentals", "", "model.Rentals", (-1));
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("[Q[+'QZu7CYO", "[Q[+'QZu7CYO", "[Q[+'QZu7CYO", 2604, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(2604);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("[Q[+'QZu7CYO", owner0, car_CarType0, 2604, 2604, 1.0, 2604, point0, "[Q[+'QZu7CYO");
      Client client0 = new Client(point0, "4km/s[W*]#?|TAjP^H", (String) null, "(2604.00, 2604.00)", (String) null, 0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient("4km/s[W*]#?|TAjP^H");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar((Car) null, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.of(0, 0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = Double.valueOf(2.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Carro:          ", "Carro:          ", "Carro:          ", "Carro:          ", 1698);
      Owner owner0 = new Owner(client0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("Carro:          ", owner0, car_CarType0, (-1952.009693748593), (-1952.009693748593), 1573.0, 4656, point0, "");
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 4, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1698, 0, zoneOffset0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient(client0, localDateTime0, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      rentals0.addRental((Rental) null);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient("l,J7T-p{HaWr;,Id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Object object0 = new Object();
      boolean boolean0 = rentals0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Rentals rentals1 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(2592);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "[Q[+'QZu7jCY", "(2592.00, 2592.00)", "(2592.00, 2592.00)", "(2592.00, 2592.00)", 2592);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      List<Rental> list0 = rentals0.getRentalListClient(client0, localDateTime0, localDateTime0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("[Q[+'QZu7jCY", "[Q[+'QZu7jCY", "[Q[+'QZu7jCY", 2592, "[Q[+'QZu7jCY");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(2592);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("[Q[+'QZu7jCY", owner0, car_CarType0, 2592, 2592, 2592, 2592, point0, "[Q[+'QZu7jCY");
      double double1 = rentals0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("[Q[+'QZu7jCY", "[Q[+'QZu7jCY", "[Q[+'QZu7jCY", 2592, "[Q[+'QZu7jCY");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(2592);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("[Q[+'QZu7jCY", owner0, car_CarType0, 2592, 2592, 2592, 2592, point0, "[Q[+'QZu7jCY");
      Client client0 = new Client(point0, "[Q[+'QZu7jCY", "(2592.00, 2592.00)", "(2592.00, 2592.00)", "(2592.00, 2592.00)", 2592);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      rentals0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      List<Rental> list0 = rentals0.getRentalListClient("Electrico");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("Electrico", "Electrico", "Electrico", (-1193), "Electrico");
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(2592);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "[Q[+'QZu7jCY", "(2592.00, 2592.00)", "(2592.00, 2592.00)", "(2592.00, 2592.00)", 2592);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertEquals(0, list0.size());
  }
}
