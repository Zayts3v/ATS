/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 14:12:43 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import model.Car;
import model.Cars;
import model.Client;
import model.Owner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cars_ESTest extends Cars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double((-1070.8991852505976));
      Point point0 = new Point(double0, double0);
      Point point1 = new Point(point0);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      try { 
        cars0.getCar(point1, point0, (-1070.8991852505976), car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(3345.0963348246);
      Point point0 = new Point(double0, double0);
      Point point1 = new Point(point0);
      try { 
        cars0.getCar("MaisBarato", point0, point1, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-2959.80569859));
      Point point0 = new Point(double0, double0);
      try { 
        cars0.getCar("MaisPerto", point0, (Point) null, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2756.21419885));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "k", "&a(R6FW}SH", "e<~", "k", (-1934046034));
      Owner owner0 = new Owner(client0);
      Car car0 = new Car("e<~", owner0, car_CarType0, (-2756.21419885), 0.4, (-233.0618731009), (-1934046034), point0, " b.K'QQ-MRrp+7kOODb");
      cars0.addCar(car0);
      List<Car> list0 = cars0.listOfCarType(car_CarType0);
      assertTrue(list0.contains(car0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Custo Total: ", "Custo Total: ", "*2kMO&4_", "=5MU", 649);
      Owner owner0 = new Owner(client0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Car car0 = new Car("*2kMO&4_", owner0, car_CarType0, 0.0, 649, 549.0328046, 0, point0, "*2kMO&4_");
      cars0.addCar(car0);
      Car car1 = cars0.getCar(point0, point0, 0.0, car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2756.21419885));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "k", "&a(R6FW}SH", "e<~", "k", 0);
      Owner owner0 = new Owner(client0);
      Car car0 = new Car("e<~", owner0, car_CarType0, (-2756.21419885), 0.4, (-233.0618731009), 0, point0, " b.K'QQ-MRrp+7kOODb");
      cars0.addCar(car0);
      Car car1 = cars0.getCar(point0, 0, car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-2363.32));
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("Hibrido", "XDPfQL", "(#[*+jLV", 0, "MaisPerto");
      Car car0 = new Car((String) null, owner0, car_CarType0, (-555.118656825), 2192.6, 324.0869, 0, point0, "MGv@F%wV$a\"yxCAr}");
      cars0.addCar(car0);
      Car car1 = cars0.getCar("MaisPerto", point0, point0, car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("-a>.rgzbdsnVP:K", "$UBfW'a?\"", "-a>.rgzbdsnVP:K", 100, "H");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("model.Cars", owner0, car_CarType0, 0.0, 0.0, 0.0, 100, (Point) null, ":P'Y^%v!;C$znX1r");
      cars0.addCar(car0);
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      // Undeclared exception!
      try { 
        cars0.getCar(point0, point0, 0.0, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cars cars0 = new Cars();
      Client client0 = new Client((Point) null, "%.2f", "%.2f", "exceptions.UnknownCarTypeException", "exceptions.UnknownCarTypeException", 0);
      Owner owner0 = new Owner(client0);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car("%.2f", owner0, car_CarType0, 1.0, (-1.0), 1.0, 2316, (Point) null, "%.2f");
      cars0.addCar(car0);
      // Undeclared exception!
      try { 
        cars0.getCar((Point) null, 1047.6331065575896, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      // Undeclared exception!
      try { 
        cars0.getCar((String) null, point0, point0, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cars cars0 = new Cars();
      // Undeclared exception!
      try { 
        cars0.addCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cars cars0 = null;
      try {
        cars0 = new Cars((Cars) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cars cars0 = new Cars();
      Object object0 = new Object();
      boolean boolean0 = cars0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cars cars0 = new Cars();
      boolean boolean0 = cars0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cars cars0 = new Cars();
      boolean boolean0 = cars0.equals(cars0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cars cars0 = new Cars();
      Client client0 = new Client((Point) null, "%.2f", "%.2f", "exceptions.UnknownCarTypeException", "exceptions.UnknownCarTypeException", 0);
      Owner owner0 = new Owner(client0);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car("%.2f", owner0, car_CarType0, 1.0, (-1.0), 1.0, 2316, (Point) null, "%.2f");
      cars0.addCar(car0);
      Cars cars1 = new Cars(cars0);
      boolean boolean0 = cars0.equals(cars1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(397L);
      Point point0 = new Point(double0, double0);
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      try { 
        cars0.getCar("MaisVarto", point0, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cars cars0 = new Cars();
      try { 
        cars0.searchCar("k");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2756.21419885));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "k", "&a(R6FW}SH", "e<~", "k", (-1934046034));
      Owner owner0 = new Owner(client0);
      Car car0 = new Car("e<~", owner0, car_CarType0, (-2756.21419885), 0.4, (-233.0618731009), (-1934046034), point0, " b.K'QQ-MRrp+7kOODb");
      cars0.addCar(car0);
      Car car1 = cars0.searchCar("e<~");
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cars cars0 = new Cars();
      Client client0 = new Client((Point) null, "%.2f", "%.2f", "exceptions.UnknownCarTypeException", "exceptions.UnknownCarTypeException", 0);
      Owner owner0 = new Owner(client0);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car("%.2f", owner0, car_CarType0, 1.0, (-1.0), 1.0, 2316, (Point) null, "%.2f");
      cars0.addCar(car0);
      try { 
        cars0.addCar(car0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      try { 
        cars0.getCar((Point) null, 1047.6331065575896, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cars cars0 = new Cars();
      cars0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      List<Car> list0 = cars0.listOfCarType(car_CarType0);
      assertEquals(0, list0.size());
  }
}
